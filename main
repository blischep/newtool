import os
import tkinter as tk
from tkinter import ttk
from tkinter import *
import customtkinter as ctk 
from PIL import Image
import setup_widget
import main_screen

ctk.set_appearance_mode("dark")  # Modes: system (default), light, dark
ctk.set_default_color_theme("green")  # Themes: blue (default), dark-blue, green
class HelperTool(ctk.CTk):
    def __init__(self):
        super().__init__() 
        self.title("Bolt Search App")

        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)
        self.configure(fg_color="#23262B") 
        setup_widget.setup_stylewidgets(self)
        setup_widget.setup_images(self)
        main_screen.setup_mainscreen(self)








#class Tooltip:
#    def __init__(self, widget, text_dict):
#        self.widget = widget
#        self.text_dict = text_dict  # Use a dictionary for tooltip text

#        self.tip = None  # Initialize tip window lazily

#        self.widget.bind("<Enter>", self.enter)
#        self.widget.bind("<Leave>", self.leave)

#    def enter(self, event):
#        if not self.tip:
#            self.create_tip()
#        self.show_tip()

#    def leave(self, event):
#        if self.tip:
#            self.tip.withdraw()

#    def create_tip(self):
#        x, y, _, _ = self.widget.bbox("insert")
#        x += self.widget.winfo_rootx() + 25
#        y += self.widget.winfo_rooty() + 30
#        self.tip = tk.Toplevel(self.widget)
#        self.tip.wm_withdraw()  # Hide the main window
#        self.tip.wm_overrideredirect(True)  # Set window as transient
#        self.tip.wm_geometry(f"+{x}+{y}")  # Set initial position

#        self.label = ttk.Label(self.tip, text="", wraplength=200)  # Wrap text
#        self.label.pack()

#    def show_tip(self):
#        selected_value = self.widget.get()
#        if selected_value in self.text_dict:
#            self.tip.title(selected_value)
#            self.label.config(text=self.text_dict[selected_value])
#            self.tip.deiconify()  # Show the tooltip window

if __name__ == "__main__":
    app = HelperTool()
    app.mainloop() 
